# ----------------------------------------------------------------------------------
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
# EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
# OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
# ----------------------------------------------------------------------------------

parameters:
  - name: description
    type: string
  - name: moveTemplate
    type: string
  - name: templateFile
    type: string
  - name: workingDir
    type: string
  - name: deployOperation
    type: string
    default: create
    values:
      - create
      - what-if

steps:

- task: AzureCLI@2
  displayName: ${{ parameters.description }} - Move Subscription
  inputs:
    azureSubscription: $(serviceConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $(var-bashPreInjectScript)

      az bicep upgrade

      echo "Deploying ${{ parameters.moveTemplate }} using ${{ parameters.deployOperation}} operation..."

      az deployment mg ${{ parameters.deployOperation }} \
        --location $(deploymentRegion) \
        --management-group-id $(var-hubnetwork-managementGroupId) \
        --template-file ${{ parameters.moveTemplate }} \
        --parameters \
            managementGroupId='$(var-hubnetwork-managementGroupId)' \
            subscriptionId='$(var-hubnetwork-subscriptionId)'

      $(var-bashPostInjectScript)
    workingDirectory: '${{ parameters.workingDir }}/utils/mg-move'

- task: AzureCLI@2
  displayName: ${{ parameters.description }} - Deploy
  inputs:
    azureSubscription: $(serviceConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $(var-bashPreInjectScript)

      echo "Deploying ${{ parameters.templateFile }} using ${{ parameters.deployOperation}} operation..."
      
      az deployment sub ${{ parameters.deployOperation }} \
      --location $(deploymentRegion) \
      --subscription $(var-hubnetwork-subscriptionId) \
      --template-file ${{ parameters.templateFile }} \
      --parameters \
          logAnalyticsWorkspaceResourceId='$(var-logging-logAnalyticsWorkspaceResourceId)' \
          subscriptionOwnerGroupObjectIds='$(var-hubnetwork-subscriptionOwnerGroupObjectIds)' \
          subscriptionContributorGroupObjectIds='$(var-hubnetwork-subscriptionContributorGroupObjectIds)' \
          subscriptionReaderGroupObjectIds='$(var-hubnetwork-subscriptionReaderGroupObjectIds)' \
          securityContactEmail='$(var-hubnetwork-securityContactEmail)' \
          securityContactPhone='$(var-hubnetwork-securityContactPhone)' \
          createBudget='$(var-hubnetwork-createBudget)' \
          budgetName='$(var-hubnetwork-budgetName)' \
          budgetAmount='$(var-hubnetwork-budgetAmount)' \
          budgetTimeGrain='$(var-hubnetwork-budgetTimeGrain)' \
          budgetStartDate='$(var-hubnetwork-budgetStartDate)' \
          budgetNotificationEmailAddress='$(var-hubnetwork-budgetNotificationEmailAddress)' \
          tagISSO='$(var-hubnetwork-tagISSO)' \
          tagClientOrganization='$(var-hubnetwork-tagClientOrganization)' \
          tagCostCenter='$(var-hubnetwork-tagCostCenter)' \
          tagDataSensitivity='$(var-hubnetwork-tagDataSensitivity)' \
          tagProjectContact='$(var-hubnetwork-tagProjectContact)' \
          tagProjectName='$(var-hubnetwork-tagProjectName)' \
          tagTechnicalContact='$(var-hubnetwork-tagTechnicalContact)' \
          deployDdosStandard='$(var-hubnetwork-deployDdosStandard)' \
          rgDdosName='$(var-hubnetwork-rgDdosName)' \
          ddosPlanName='$(var-hubnetwork-ddosPlanName)' \
          rgHubName='$(var-hubnetwork-rgHubName)' \
          hubVnetName='$(var-hubnetwork-hubVnetName)' \
          hubVnetAddressPrefixRFC1918='$(var-hubnetwork-hubVnetAddressPrefixRFC1918)' \
          hubVnetAddressPrefixCGNAT='$(var-hubnetwork-hubVnetAddressPrefixCGNAT)' \
          hubVnetAddressPrefixBastion='$(var-hubnetwork-hubVnetAddressPrefixBastion)' \
          hubEanSubnetName='$(var-hubnetwork-hubEanSubnetName)' \
          hubEanSubnetAddressPrefix='$(var-hubnetwork-hubEanSubnetAddressPrefix)' \
          hubPublicSubnetName='$(var-hubnetwork-hubPublicSubnetName)' \
          hubPublicSubnetAddressPrefix='$(var-hubnetwork-hubPublicSubnetAddressPrefix)' \
          hubPazSubnetName='$(var-hubnetwork-hubPazSubnetName)' \
          hubPazSubnetAddressPrefix='$(var-hubnetwork-hubPazSubnetAddressPrefix)' \
          hubDevIntSubnetName='$(var-hubnetwork-hubDevIntSubnetName)' \
          hubDevIntSubnetAddressPrefix='$(var-hubnetwork-hubDevIntSubnetAddressPrefix)' \
          hubSubnetProdIntName='$(var-hubnetwork-hubSubnetProdIntName)' \
          hubSubnetProdIntAddressPrefix='$(var-hubnetwork-hubSubnetProdIntAddressPrefix)' \
          hubSubnetMrzIntName='$(var-hubnetwork-hubSubnetMrzIntName)' \
          hubSubnetMrzIntAddressPrefix='$(var-hubnetwork-hubSubnetMrzIntAddressPrefix)' \
          hubSubnetHAName='$(var-hubnetwork-hubSubnetHAName)' \
          hubSubnetHAAddressPrefix='$(var-hubnetwork-hubSubnetHAAddressPrefix)' \
          hubSubnetGatewaySubnetPrefix='$(var-hubnetwork-hubSubnetGatewaySubnetPrefix)' \
          hubSubnetBastionAddressPrefix='$(var-hubnetwork-hubSubnetBastionAddressPrefix)' \
          bastionName='$(var-hubnetwork-bastionName)' \
          deployFirewallVMs='$(var-hubnetwork-deployFirewallVMs)' \
          useFortigateFW='$(var-hubnetwork-useFortigateFW)' \
          fwDevILBName='$(var-hubnetwork-fwDevILBName)' \
          fwDevVMSku='$(var-hubnetwork-fwDevVMSku)' \
          fwDevVM1Name='$(var-hubnetwork-fwDevVM1Name)' \
          fwDevVM2Name='$(var-hubnetwork-fwDevVM2Name)' \
          fwDevILBExternalFacingIP='$(var-hubnetwork-fwDevILBExternalFacingIP)' \
          fwDevVM1ExternalFacingIP='$(var-hubnetwork-fwDevVM1ExternalFacingIP)' \
          fwDevVM2ExternalFacingIP='$(var-hubnetwork-fwDevVM2ExternalFacingIP)' \
          fwDevILBMrzIntIP='$(var-hubnetwork-fwDevILBMrzIntIP)' \
          fwDevVM1MrzIntIP='$(var-hubnetwork-fwDevVM1MrzIntIP)' \
          fwDevVM2MrzIntIP='$(var-hubnetwork-fwDevVM2MrzIntIP)' \
          fwDevILBDevIntIP='$(var-hubnetwork-fwDevILBDevIntIP)' \
          fwDevVM1DevIntIP='$(var-hubnetwork-fwDevVM1DevIntIP)' \
          fwDevVM2DevIntIP='$(var-hubnetwork-fwDevVM2DevIntIP)' \
          fwDevVM1HAIP='$(var-hubnetwork-fwDevVM1HAIP)' \
          fwDevVM2HAIP='$(var-hubnetwork-fwDevVM2HAIP)' \
          fwProdILBName='$(var-hubnetwork-fwProdILBName)' \
          fwProdVMSku='$(var-hubnetwork-fwProdVMSku)' \
          fwProdVM1Name='$(var-hubnetwork-fwProdVM1Name)' \
          fwProdVM2Name='$(var-hubnetwork-fwProdVM2Name)' \
          fwProdILBExternalFacingIP='$(var-hubnetwork-fwProdILBExternalFacingIP)' \
          fwProdVM1ExternalFacingIP='$(var-hubnetwork-fwProdVM1ExternalFacingIP)' \
          fwProdVM2ExternalFacingIP='$(var-hubnetwork-fwProdVM2ExternalFacingIP)' \
          fwProdILBMrzIntIP='$(var-hubnetwork-fwProdILBMrzIntIP)' \
          fwProdVM1MrzIntIP='$(var-hubnetwork-fwProdVM1MrzIntIP)' \
          fwProdVM2MrzIntIP='$(var-hubnetwork-fwProdVM2MrzIntIP)' \
          fwProdILBPrdIntIP='$(var-hubnetwork-fwProdILBPrdIntIP)' \
          fwProdVM1PrdIntIP='$(var-hubnetwork-fwProdVM1PrdIntIP)' \
          fwProdVM2PrdIntIP='$(var-hubnetwork-fwProdVM2PrdIntIP)' \
          fwProdVM1HAIP='$(var-hubnetwork-fwProdVM1HAIP)' \
          fwProdVM2HAIP='$(var-hubnetwork-fwProdVM2HAIP)' \
          rgMrzName='$(var-hubnetwork-rgMrzName)' \
          mrzVnetName='$(var-hubnetwork-mrzVnetName)' \
          mrzVnetAddressPrefixRFC1918='$(var-hubnetwork-mrzVnetAddressPrefixRFC1918)' \
          mrzMazSubnetName='$(var-hubnetwork-mrzMazSubnetName)' \
          mrzMazSubnetAddressPrefix='$(var-hubnetwork-mrzMazSubnetAddressPrefix)' \
          mrzInfSubnetName='$(var-hubnetwork-mrzInfSubnetName)' \
          mrzInfSubnetAddressPrefix='$(var-hubnetwork-mrzInfSubnetAddressPrefix)' \
          mrzSecSubnetName='$(var-hubnetwork-mrzSecSubnetName)' \
          mrzSecSubnetAddressPrefix='$(var-hubnetwork-mrzSecSubnetAddressPrefix)' \
          mrzLogSubnetName='$(var-hubnetwork-mrzLogSubnetName)' \
          mrzLogSubnetAddressPrefix='$(var-hubnetwork-mrzLogSubnetAddressPrefix)' \
          mrzMgmtSubnetName='$(var-hubnetwork-mrzMgmtSubnetName)' \
          mrzMgmtSubnetAddressPrefix='$(var-hubnetwork-mrzMgmtSubnetAddressPrefix)' \
          rgPazName='$(var-hubnetwork-rgPazName)' \
          fwUsername='$(var-hubnetwork-fwUsername)' \
          fwPassword='$(var-hubnetwork-fwPassword)'
          
      $(var-bashPostInjectScript)
    workingDirectory: '${{ parameters.workingDir }}/lz-platform-connectivity-hub-nva'

- task: AzureCLI@2
  displayName: ${{ parameters.description }} - Azure Policy - Enable DDoS Standard (if var-hubnetwork-deployDdosStandard=true)
  inputs:
    azureSubscription: $(serviceConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $(var-bashPreInjectScript)

      case $(var-hubnetwork-deployDdosStandard) in
        (true)
          echo "DDoS Standard is enabled, creating Azure Policy assignment to protect for all Virtual Networks in '$(var-topLevelManagementGroupName)' management group."

          # Identify the Resource Id for DDOS Standard Plan
          DDOS_PLAN_ID=`az network ddos-protection show -g $(var-hubnetwork-rgDdosName) -n $(var-hubnetwork-ddosPlanName) --subscription $(var-hubnetwork-subscriptionId) --query id -o tsv`
          echo "DDoS Standard Plan Id: $DDOS_PLAN_ID"

          # Apply the policy assignment
          echo "Deploying policy assignment using policy/custom/assignments/ddos.bicep"

          az deployment mg ${{ parameters.deployOperation }} \
            --location $(deploymentRegion) \
            --management-group-id $(var-topLevelManagementGroupName) \
            --template-file ddos.bicep \
            --parameters \
                policyAssignmentManagementGroupId='$(var-topLevelManagementGroupName)' \
                policyDefinitionManagementGroupId=$(var-topLevelManagementGroupName) \
                ddosStandardPlanId="$DDOS_PLAN_ID"
          ;;
        (*)
          echo "DDoS Standard is not enabled.  Azure Policy assignment will be skipped."
          ;;
      esac

      $(var-bashPostInjectScript)
    workingDirectory: '$(System.DefaultWorkingDirectory)/policy/custom/assignments'