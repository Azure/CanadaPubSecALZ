# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
# EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
# OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
# ----------------------------------------------------------------------------------

parameters:
  - name: workingDir
    type: string
  - name: deployOperation
    type: string
    default: create
    values:
      - create
      - what-if
  - name: networkingManagementGroupId
    type: string
  - name: networkingSubscriptionId
    type: string
  - name: networkingRegion
    type: string
  - name: networkingConfigurationPath
    type: string
  - name: azureFirewallPolicyConfigurationPath
    type: string

steps:

- template: ./move-subscription.yml
  parameters:
    managementGroup: ${{ parameters.networkingManagementGroupId }}
    subscriptionGuid: ${{ parameters.networkingSubscriptionId }}
    subscriptionLocation: ${{ parameters.networkingRegion }}
    templateDirectory: $(Build.SourcesDirectory)/landingzones/utils/mg-move
    templateFile: move-subscription.bicep
    workingDir: ${{ parameters.workingDir }}/utils/mg-move

- task: AzureCLI@2
  displayName: Register Resource Providers
  inputs:
    azureSubscription: $(serviceConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $(var-bashPreInjectScript)

      az account set -s ${{ parameters.networkingSubscriptionId }}
      az provider register -n Microsoft.ContainerService --subscription '${{ parameters.networkingSubscriptionId }}'

      $(var-bashPostInjectScript)

- task: AzureCLI@2
  displayName: Configure Hub Networking
  inputs:
    azureSubscription: $(serviceConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $(var-bashPreInjectScript)

      # Check if the Azure Firewall Policy Id is provided in the parameters json.
      # If present, then do no change it.  Otherwise add it to the json parameter file.
      AZURE_FIREWALL_POLICY_RESOURCE_ID_IN_PARAMETERS=`jq -r .parameters.azureFirewallExistingPolicyId.value ${{ parameters.networkingConfigurationPath }}`   

      if [[ $AZURE_FIREWALL_POLICY_RESOURCE_ID_IN_PARAMETERS != null && "$AZURE_FIREWALL_POLICY_RESOURCE_ID_IN_PARAMETERS" != "" ]];
      then
        echo "Azure Firewall Policy Resource ID is set in ${{ parameters.networkingConfigurationPath }} to $AZURE_FIREWALL_POLICY_RESOURCE_ID_IN_PARAMETERS"
      else
        echo "Azure Firewall Policy Resource ID is not set in ${{ parameters.networkingConfigurationPath }}.  Updating ${{ parameters.networkingConfigurationPath }} ..."

        # Install Azure CLI extension for Azure Firewall
        az extension add --name azure-firewall

        # Identify Azure Firewall Policy based on provided configuration
        echo 'Using ${{ parameters.azureFirewallPolicyConfigurationPath }} to load Azure Firewall policy configuration'
        AZURE_FIREWALL_POLICY_RESOURCE_GROUP=`jq -r .parameters.resourceGroupName.value ${{ parameters.azureFirewallPolicyConfigurationPath }}`
        AZURE_FIREWALL_POLICY_NAME=`jq -r .parameters.policyName.value ${{ parameters.azureFirewallPolicyConfigurationPath }}`

        echo "Azure Firewall Policy Resource Group: $AZURE_FIREWALL_POLICY_RESOURCE_GROUP"
        echo "Azure Firewall Policy Name: $AZURE_FIREWALL_POLICY_NAME"

        AZURE_FIREWALL_POLICY_ID=`az network firewall policy show --subscription ${{ parameters.networkingSubscriptionId }} --resource-group $AZURE_FIREWALL_POLICY_RESOURCE_GROUP --name $AZURE_FIREWALL_POLICY_NAME --query id -o tsv`
        echo "Azure Firewall Policy Id: $AZURE_FIREWALL_POLICY_ID"

        # use jq to update the json parameter file
        echo "$( jq '.parameters.azureFirewallExistingPolicyId.value = "$AZURE_FIREWALL_POLICY_ID"' ${{ parameters.networkingConfigurationPath }} )" > ${{ parameters.networkingConfigurationPath }}
      fi

      # Check if the log analytics workspace id is provided in the parameters json.
      # If present, then do no change it.  Otherwise add it to the json parameter file.
      LOG_ANALYTICS_WORKSPACE_RESOURCE_ID_IN_PARAMETERS=`jq -r .parameters.logAnalyticsWorkspaceResourceId.value ${{ parameters.networkingConfigurationPath }}`   

      if [[ $LOG_ANALYTICS_WORKSPACE_RESOURCE_ID_IN_PARAMETERS != null && "$LOG_ANALYTICS_WORKSPACE_RESOURCE_ID_IN_PARAMETERS" != "" ]];
      then
        echo "Log Analytics Workspace Resource ID is set in ${{ parameters.networkingConfigurationPath }} to $LOG_ANALYTICS_WORKSPACE_RESOURCE_ID_IN_PARAMETERS"
      else
        echo "Log Analytics Workspace Resource ID is not set in ${{ parameters.networkingConfigurationPath }}.  Updating ${{ parameters.networkingConfigurationPath }} with $(var-logging-logAnalyticsWorkspaceResourceId)"

        # use jq to update the json parameter file
        echo "$( jq '.parameters.logAnalyticsWorkspaceResourceId.value = "$(var-logging-logAnalyticsWorkspaceResourceId)"' ${{ parameters.networkingConfigurationPath }} )" > ${{ parameters.networkingConfigurationPath }}
      fi

      echo "Deploying main.bicep using ${{ parameters.deployOperation}} operation using ${{ parameters.networkingConfigurationPath  }}..."
      
      az deployment sub ${{ parameters.deployOperation }} \
      --location ${{ parameters.networkingRegion }} \
      --subscription ${{ parameters.networkingSubscriptionId }} \
      --template-file main.bicep \
      --parameters @${{ parameters.networkingConfigurationPath }}
          
      $(var-bashPostInjectScript)
    workingDirectory: '${{ parameters.workingDir }}/lz-platform-connectivity-hub-azfw'

- task: AzureCLI@2
  displayName: Azure Policy - Enable Private DNS Zone Policies (if deployPrivateDnsZones=true in config)
  inputs:
    azureSubscription: $(serviceConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $(var-bashPreInjectScript)

      DEPLOY_PRIVATE_DNS_ZONES=`jq -r .parameters.deployPrivateDnsZones.value ${{ parameters.networkingConfigurationPath }}`
      PRIVATE_DNS_ZONES_RESOURCE_GROUP=`jq -r .parameters.rgPrivateDnsZonesName.value ${{ parameters.networkingConfigurationPath }}`   

      case $DEPLOY_PRIVATE_DNS_ZONES in
        (true)
          echo "Hub Network will manage private dns zones, creating Azure Policy assignment to automatically create Private Endpoint DNS Zones"

          # Apply the policy assignment
          echo "Deploying policy assignment using policy/custom/assignments/DNSPrivateEndpoints.bicep"

          az deployment mg ${{ parameters.deployOperation }} \
            --location ${{ parameters.networkingRegion }} \
            --management-group-id $(var-topLevelManagementGroupName) \
            --template-file DNSPrivateEndpoints.bicep \
            --parameters \
                policyAssignmentManagementGroupId='$(var-topLevelManagementGroupName)' \
                policyDefinitionManagementGroupId='$(var-topLevelManagementGroupName)' \
                privateDNSZoneSubscriptionId='${{ parameters.networkingSubscriptionId }}' \
                privateDNSZoneResourceGroupName='$PRIVATE_DNS_ZONES_RESOURCE_GROUP'
          ;;
        (*)
          echo "Hub Network will not manage private dns zones.  Azure Policy assignment will be skipped."
          ;;
      esac

      $(var-bashPostInjectScript)
    workingDirectory: '$(System.DefaultWorkingDirectory)/policy/custom/assignments'

- task: AzureCLI@2
  displayName: Azure Policy - Enable DDoS Standard (if deployDdosStandard=true in config)
  inputs:
    azureSubscription: $(serviceConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $(var-bashPreInjectScript)

      DEPLOY_DDOS_STANDARD=`jq -r .parameters.deployDdosStandard.value ${{ parameters.networkingConfigurationPath }}`

      case $DEPLOY_DDOS_STANDARD in
        (true)
          echo "DDoS Standard is enabled, creating Azure Policy assignment to protect for all Virtual Networks in '$(var-topLevelManagementGroupName)' management group."

          DDOS_STANDARD_RESOURCE_GROUP_NAME=`jq -r .parameters.rgDdosName.value ${{ parameters.networkingConfigurationPath }}`
          DDOS_STANDARD_PLAN_NAME=`jq -r .parameters.ddosPlanName.value ${{ parameters.networkingConfigurationPath }}`

          # Identify the Resource Id for DDOS Standard Plan
          DDOS_PLAN_ID=`az network ddos-protection show -g $DDOS_STANDARD_RESOURCE_GROUP_NAME -n $DDOS_STANDARD_PLAN_NAME --subscription ${{ parameters.networkingSubscriptionId }} --query id -o tsv`
          echo "DDoS Standard Plan Id: $DDOS_PLAN_ID"

          # Apply the policy assignment
          echo "Deploying policy assignment using policy/custom/assignments/DDoS.bicep"

          az deployment mg ${{ parameters.deployOperation }} \
            --location ${{ parameters.networkingRegion }} \
            --management-group-id $(var-topLevelManagementGroupName) \
            --template-file DDoS.bicep \
            --parameters \
                policyAssignmentManagementGroupId='$(var-topLevelManagementGroupName)' \
                policyDefinitionManagementGroupId=$(var-topLevelManagementGroupName) \
                ddosStandardPlanId="$DDOS_PLAN_ID"
          ;;
        (*)
          echo "DDoS Standard is not enabled.  Azure Policy assignment will be skipped."
          ;;
      esac

      $(var-bashPostInjectScript)
    workingDirectory: '$(System.DefaultWorkingDirectory)/policy/custom/assignments'