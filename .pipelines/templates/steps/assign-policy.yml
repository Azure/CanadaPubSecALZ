# ----------------------------------------------------------------------------------
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
# EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
# OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
# ----------------------------------------------------------------------------------

parameters:
  - name: description
    type: string
  - name: deployTemplates
    type: object
  - name: deployOperation
    type: string
    default: create
    values:
      - create
      - what-if
  - name: workingDir
    type: string
  
steps:

- ${{ each policy in parameters.deployTemplates }}:
  - task: AzureCLI@2
    displayName: '${{ parameters.description }} - ${{ policy }}.bicep'
    inputs:
      azureSubscription: $(serviceConnection)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        $(var-bashPreInjectScript)

        echo "Populating templated properties in ${{ policy }}.properties.json"
        sed -i 's~{{var-topLevelManagementGroupName}}~$(var-topLevelManagementGroupName)~g' ${{ policy }}.properties.json

        sed -i 's~{{var-logging-logAnalyticsWorkspaceResourceId}}~$(var-logging-logAnalyticsWorkspaceResourceId)~g' ${{ policy }}.properties.json
        sed -i 's~{{var-logging-logAnalyticsWorkspaceId}}~$(var-logging-logAnalyticsWorkspaceId)~g' ${{ policy }}.properties.json
        sed -i 's~{{var-logging-logAnalyticsResourceGroupName}}~$(var-logging-logAnalyticsResourceGroupName)~g' ${{ policy }}.properties.json
        
        sed -i 's~{{var-logging-diagnosticSettingsforNetworkSecurityGroupsStoragePrefix}}~$(var-logging-diagnosticSettingsforNetworkSecurityGroupsStoragePrefix)~g' ${{ policy }}.properties.json

        cat ${{ policy }}.properties.json ; echo

        echo "Deploying ${{ policy }}.bicep using ${{ parameters.deployOperation}} operation..."

        az deployment mg ${{ parameters.deployOperation }} \
          --location $(deploymentRegion) \
          --management-group-id $(var-topLevelManagementGroupName) \
          --template-file ${{ policy }}.bicep \
          --parameters ${{ policy }}.properties.json
        
        $(var-bashPostInjectScript)
      workingDirectory: ${{ parameters.workingDir }}
