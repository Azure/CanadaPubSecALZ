# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
# EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
# OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
# ----------------------------------------------------------------------------------

name: 0 - Everything

on:
  workflow_dispatch:
    inputs:
      hubNetworkType:
        type: choice
        description: "Select the hub network type"
        required: true
        options:
          - "HubNetworkWithNVA"
          - "HubNetworkWithAzureFirewall"
        default: "HubNetworkWithAzureFirewall"
      subscriptionIds:
        type: string
        description: Subscription ID(s) (optional), e.g. "abcd", "1234"
        required: false
      environmentName:
        type: string
        description: Environment name (optional), e.g. CanadaESLZ-main
        required: false

defaults:
  run:
    shell: pwsh
    working-directory: scripts/deployments

jobs:
  ManagementGroups:
    name: Management Groups

    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure PowerShell modules
      if: ${{ false }}
      run: |
        Install-Module Az -Force
        Install-Module powershell-yaml -Force

    - name: Deploy Management Groups
      run: |
        ./RunWorkflows.ps1 `
          -DeployManagementGroups `
          -EnvironmentName '${{github.event.inputs.environmentName}}' `
          -LoginServicePrincipalJson (ConvertTo-SecureString -String '${{secrets.ALZ_CREDENTIALS}}' -AsPlainText -Force) `
          -GitHubRepo ${env:GITHUB_REPOSITORY} `
          -GitHubRef ${env:GITHUB_REF}

  Roles:
    needs:
      - ManagementGroups

    name: Roles
    
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure PowerShell modules
      run: |
        Install-Module Az -Force
        Install-Module powershell-yaml -Force

    - name: Deploy Roles
      run: |
        ./RunWorkflows.ps1 `
          -DeployRoles `
          -EnvironmentName '${{github.event.inputs.environmentName}}' `
          -LoginServicePrincipalJson (ConvertTo-SecureString -String '${{secrets.ALZ_CREDENTIALS}}' -AsPlainText -Force) `
          -GitHubRepo ${env:GITHUB_REPOSITORY} `
          -GitHubRef ${env:GITHUB_REF}

  Logging:
    needs:
      - Roles

    name: Logging

    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure PowerShell modules
      run: |
        Install-Module Az -Force
        Install-Module powershell-yaml -Force

    - name: Deploy Logging
      run: |
        ./RunWorkflows.ps1 `
          -DeployLogging `
          -EnvironmentName '${{github.event.inputs.environmentName}}' `
          -LoginServicePrincipalJson (ConvertTo-SecureString -String '${{secrets.ALZ_CREDENTIALS}}' -AsPlainText -Force) `
          -GitHubRepo ${env:GITHUB_REPOSITORY} `
          -GitHubRef ${env:GITHUB_REF}

  Policy:
    needs:
      - Logging

    name: Policy

    runs-on: ubuntu-latest

    strategy:
      matrix:
        policyType:
          - DeployBuiltInPolicy
          - DeployCustomPolicy

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure PowerShell modules
      run: |
        Install-Module Az -Force
        Install-Module powershell-yaml -Force

    - name: Deploy Policy
      run: |
        ./RunWorkflows.ps1 `
          -${{ matrix.policyType }} `
          -EnvironmentName '${{github.event.inputs.environmentName}}' `
          -LoginServicePrincipalJson (ConvertTo-SecureString -String '${{secrets.ALZ_CREDENTIALS}}' -AsPlainText -Force) `
          -GitHubRepo ${env:GITHUB_REPOSITORY} `
          -GitHubRef ${env:GITHUB_REF}

  HubNetworking:
    needs:
      - Policy

    name: Hub Networking (${{github.event.inputs.hubNetworkType}})

    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure PowerShell modules
      run: |
        Install-Module Az -Force
        Install-Module powershell-yaml -Force

    - name: Deploy Hub Network with Azure Firewall
      if: github.event.inputs.hubNetworkType == 'HubNetworkWithAzureFirewall'
      run: |
        ./RunWorkflows.ps1 `
          -Deploy${{github.event.inputs.hubNetworkType}} `
          -EnvironmentName '${{github.event.inputs.environmentName}}' `
          -LoginServicePrincipalJson (ConvertTo-SecureString -String '${{secrets.ALZ_CREDENTIALS}}' -AsPlainText -Force) `
          -GitHubRepo ${env:GITHUB_REPOSITORY} `
          -GitHubRef ${env:GITHUB_REF}

    - name: Deploy Hub Network with NVA
      if: github.event.inputs.hubNetworkType == 'HubNetworkWithNVA'
      run: |
        ./RunWorkflows.ps1 `
          -Deploy${{github.event.inputs.hubNetworkType}} `
          -EnvironmentName '${{github.event.inputs.environmentName}}' `
          -LoginServicePrincipalJson (ConvertTo-SecureString -String '${{secrets.ALZ_CREDENTIALS}}' -AsPlainText -Force) `
          -GitHubRepo ${env:GITHUB_REPOSITORY} `
          -GitHubRef ${env:GITHUB_REF} `
          -NvaUsername (ConvertTo-SecureString -String '${{secrets.NVA_USERNAME}}' -AsPlainText -Force) `
          -NvaPassword (ConvertTo-SecureString -String '${{secrets.NVA_PASSWORD}} '-AsPlainText -Force)

  SubscriptionMatrix:
    if: github.event.inputs.subscriptionIds != ''

    name: Create subscription deployment(s) as matrix
    
    runs-on: ubuntu-latest
    
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: set-matrix
        run: |
          $SubscriptionIdJsonObject = @{
              SubscriptionId = ${{github.event.inputs.subscriptionIds}} -Split ","
          }

          $SubscriptionIdJson = $SubscriptionIdJsonObject | ConvertTo-Json -Compress

          Write-Output "::set-output name=matrix::$SubscriptionIdJson"

  Subscriptions:
    if: github.event.inputs.subscriptionIds != ''
    needs:
      - HubNetworking
      - SubscriptionMatrix

    name: Subscriptions

    runs-on: ubuntu-latest

    strategy:
      matrix: ${{fromJSON(needs.SubscriptionMatrix.outputs.matrix)}}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure PowerShell modules
      run: |
        Install-Module Az -Force
        Install-Module powershell-yaml -Force

    - name: Deploy Subscriptions
      run: |
        ./RunWorkflows.ps1 `
          -DeploySubscriptionIds '${{ matrix.subscriptionId }}' `
          -EnvironmentName '${{github.event.inputs.environmentName}}' `
          -LoginServicePrincipalJson (ConvertTo-SecureString -String '${{secrets.ALZ_CREDENTIALS}}' -AsPlainText -Force) `
          -GitHubRepo ${env:GITHUB_REPOSITORY} `
          -GitHubRef ${env:GITHUB_REF}
